name: Playwright Tests with Single stage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  issues: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright Browsers
      run: npx playwright install chromium

    - name: Install Allure CLI
      run: npm install -g allure-commandline

    - name: Run Playwright tests
      run: npx playwright test .tests/githubIntegration.spec.js
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Generate Allure report
      run: |
        mkdir -p allure-results
        allure generate allure-results --clean -o allure-report

    - name: Upload Allure report
      if: always() # Ensure the report is uploaded even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report/

    - name: Set unique path for report
      run: |
        echo "REPORT_PATH=reports/${{ github.run_id }}" >> $GITHUB_ENV
        echo "GitHub Pages URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ github.run_id }}"

    - name: Move Allure report to unique path
      run: |
        mkdir -p ${{ env.REPORT_PATH }}
        cp -r allure-report/* ${{ env.REPORT_PATH }}/

    - name: Deploy Allure report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: .
        publish_branch: gh-pages
        dest_dir: ${{ env.REPORT_PATH }}

    - name: Display the deployed URL
      run: |
        echo "::notice ::Deployed Report URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ github.run_id }}"

    # Step 1: Determine Workflow Status and Send Slack Notification
    - name: Notify Slack of Workflow Status
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✅ Workflow Succeeded"
        elif [ "${{ job.status }}" == "failure" ]; then
          STATUS="❌ Workflow Failed"
        else
          STATUS="⚠️ Workflow Skipped"
        fi
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"${STATUS}\n*Branch*: ${{ github.ref_name }}\n*Commit*: ${{ github.sha }}\n*Committer*: ${{ github.actor }}\n*Workflow*: ${{ github.workflow }}\",
          \"attachments\": [
            {
              \"text\": \"View more details: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here>\"
            }
          ]
        }" ${{ secrets.SLACKWEBHOOKURL }}