name: Playwright Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  issues: write

jobs:
  # Setup Job: Install dependencies locally (including playwright and @playwright/test)
  setup:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # Install dependencies (including playwright and @playwright/test locally)
      - name: Install Local Dependencies
        run: npm ci  # This installs the dependencies defined in package.json

  # Test Job: This job will run the Playwright tests
  test:
    runs-on: ubuntu-latest
    needs: setup  # Ensures the setup job is completed first
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Use the Node.js version installed in the setup job
      - name: Use Node.js version from setup
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}

      # Install local dependencies again to ensure node_modules is present in this job
      - name: Install Local Dependencies
        run: npm ci  # Ensure node_modules are available

      # Install Playwright Browsers
      - name: Install Playwright Browsers
        run: npx playwright install chromium

      # Run Playwright tests
      - name: Run Playwright Tests
        run: npx playwright test .tests/githubIntegration.spec.js

      # Upload Playwright test report as an artifact
      - name: Upload Playwright Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Report Generation Job: This job generates Allure reports
  report:
    runs-on: ubuntu-latest
    needs: test  # Ensures the test job is completed first
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Allure CLI if not available globally
      - name: Install Allure CLI
        run: npm install -g allure-commandline

      # Generate the Allure report
      - name: Generate Allure Report
        run: |
          mkdir -p allure-results
          allure generate allure-results --clean -o allure-report

      # Upload Allure report artifact
      - name: Upload Allure Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/

  # Deploy Job: This job deploys the Allure report to GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: report  # Ensures the report job is completed first
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set unique report path environment variable
      - name: Set Report Path
        run: |
          echo "REPORT_PATH=reports/${{ github.run_id }}" >> $GITHUB_ENV
          echo "GitHub Pages URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ github.run_id }}"

      # Install Allure CLI if not available globally
      - name: Install Allure CLI
        run: npm install -g allure-commandline
        
      # Move Allure report to unique path
      - name: Move Allure Report to Unique Path
        run: |
          mkdir -p ${{ env.REPORT_PATH }}
          cp -r allure-report/* ${{ env.REPORT_PATH }}/

      # Deploy Allure Report to GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ env.REPORT_PATH }}
          publish_branch: gh-pages
          dest_dir: ${{ env.REPORT_PATH }}

      # Display the deployed Allure report URL
      - name: Display Deployed Report URL
        run: |
          echo "::notice ::Deployed Report URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/${{ github.run_id }}"